重要命令

RHEL7-find命令的使用




本节所讲内容：
文件查找
find命令的使用

第1章 文件查找方法
查找文件一般有以下几个命令：
which      查看可执行文件的位置
whereis   查看可执行文件的位置 及相关文件
        locate      配合数据库缓存，快速查看文件位置
grep      过滤，它是一个文本搜索工具
find
而我们常用的有grep、find、which


[root@panda mnt]# rpm -qf `which useradd`
复制代码
shadow-utils-4.1.5.1-18.el7.x86_64


例2：whereis命令查找


[root@panda mnt]# whereis passwd
复制代码


n  例3：locate命令查找

locate命令和find –name 功能差不多，是它的另外一种写法，但是这个要比find搜索快的多，因为find命令查找的是具体目录文件，而locate它搜索的是一个数据库/var/lib/mlocate/mlocate.db，这个数据库中存有本地所有的文件信息；这个数据库是Linux自动创建并每天自动更新维护。相关的配置信息在/etc/updatedb.conf，查看定时任务信息在/etc/cron.daily/mlocate.cron

[root@panda ~]# locate a.txt
[root@panda ~]#touch /mnt/b.txt|updatedb| locate b.txt
[root@panda ~]# touch /opt/c.txt|updatedb|locate c.txt
复制代码


对于当天新加文件查找，我们也可以手动进行更新数据库updatedb
n  例4：grep命令的查找使用
作用：过滤,它能够使用正则表达式来搜索文本，并把结果打印出来
参数：
  -v  取反
-i  忽略大小写
  ^#   以#开头
#$   以#结尾
^$   空行
  -n 对过滤的内容加上行号


[root@panda ~]# grep root /etc/passwd
[root@panda ~]# grep -n root /etc/passwd
[root@panda ~]# grep -v nologin /etc/passwd
复制代码


第2章 find命令的形式
格式：find    pathname    –options   [-print]
    命令字   路径名称     选项      输出
参数：
pathname: find命令所查找的目录路径。例如用. 来表示当前目录，用 / 来表示系统根目录。
-print：find命令将匹配的文件输出到标准输出。
find命令选项:
-name     按照文件名查找文件。  “名称”
-perm      按照文件权限来查找文件。666777 等
-prune     使用这一选项可以使find命令不在当前指定的目录中查找(排除) 如果同时使用-depth选 项，那么-prune将被find命令忽略
-depth     在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找
-user       按照文件属主来查找文件
-nouser    查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在 1200
-group     按照文件所属的组来查找文件
-nogroup        查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在
-mtime –n  / +n   按照文件的更改时间来查找文件，
                      - n 表示文件更改时间距现在n天以内
                      + n 表示文件更改时间距现在n天以前
-type       查找某一类型的文件
                     b - 块设备文件
                     d - 目录
                     c - 字符设备文件
                     p - 管道文件
                     l- 符号链接文件
                     f - 普通文件
-size n      [c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计
-exec       对匹配的文件执行该参数所给出的其他linux命令， 相应命令的形式为' 命令 {} \;，注意{ }和 \；之间的空格，{}代表查到的内容
-fstype    查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。
-mount    在查找文件时不跨越文件系统mount点。
-follow    如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。


第3章 find 命令常用的参数

文件名选项是find命令最常用的选项，要么单独使用该选项，要么和其他选项一起使用。
注意：可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来
路径选项：不管当前路径是什么，如果想要在自己的根目录$HOME中查找文件名符合*.txt的文件，使用~作为 'pathname'参数，波浪号~代表了你的$HOME目录。
n 例1：查找当前用户下所有txt格式的文件

[root@panda ~]# find /root –iname aa*  --->忽略大小写
[root@panda ~]# find . -name AA*
复制代码




n 例2：在当前目录及子目录中查找所有的txt文件


[root@panda network-scripts]# find ~ -name AA*  ---> ~表示当前用户的家目录里面进行查找
复制代码


3.1 按照更改时间或访问时间等查找文件

比如你遇到了以下情况：
如果希望按照更改时间来查找文件，可以使用mtime,atime或ctime选项
              mtime:文件最后一次修改的时间
              atime:最后一次访问时间
              ctime:文件的最后一次变化时间，也就是修改时间
q 如果系统突然没有可用空间了，很有可能某一个文件的长度在此期间增长迅速，这时就可以用mtime选项来查找这样的文件，删除一部分以前时间的文件来释放空间
下面这张图是生产中服务器用的一些常用写法，大家可以看一下（AIX7.2） \;





n 例1：希望在系统/root目录下查找更改时间在5日以内的文件





n 例2：查找在系统根目录下更改时间在3日以前的文件



3.2 对查找内容执行相应命令

find找到相应的文件以后，它默认执行的动作：-print
还支持一些其它动作：  -ls
                                     -delete
                                     -exec   这个选项参数后面可以跟自定义的SHELL命令
如果我们要对查找到的文件或目录等进行进一步的操作，比如删除，查看文件属性等，可以使用这个exec命令


[root@panda72 ~]# find . -iname "a.*" -ls
复制代码
137592843    0 -rw-r--r--   1 root     root            0 Jun 21 20:52 ./A.txt
139856439    4 -rw-r--r--   1 root     root           53 Jun 19 21:25 ./a.err
[root@panda72 ~]# find . -name a.* -delete
复制代码





n 例2：查找密码文件，并匹配出root用户相应的信息




n 例3：查找一个文件，并把这个文件复制到指定的目录下面





n 多次使用exec命令


[root@panda ~]# find /etc/ -name passwd -exec ls -l {} \; -exec cp {} /mnt \;
复制代码


例4：和xargs命令使用
xargs命令是把前面输入的标准输出当做后一个程序的命令行参数
管道符的作用是把前一个命令的标准输出作为后一个命令的标准输入

[root@panda ~]# find . -name "*.txt" |xargs -I {} cp {} /var/tmp  在使用的时候一定要测试
[root@panda ~]# find /etc -name passwd |xargs -t grep root 显示执行过程
复制代码


第4章 命令判断

可以通过这三个特殊符号来判断  ；  &&  ||
；不考虑指令的相关性，连续输入指令去执行
例1



[root@xuegod72 apps]# sync;sync;shutdown -r now
复制代码


; 不保证命令全部执行成功
&& 逻辑与 =====它是只有前面的命令执行成功，后面的命令才会去执行
|| 逻辑或 =====它是如果前面的命令执行成功，那么后面的命令就不执行了
源码编译：./configure  &&  make &&  make install



命令情况

说 明
命令1  && 命令2
1、  如果命令1执行，且执行正确($?  = 0)，然后执行命令2

2、  如果命令1执行完成，但是执行错误（$?  ≠0），那么后面的命令是不会执行的
命令1 || 命令2
1、  如果命令1执行，且执行正确($?  = 0)，那么命令2不执行

2、  如果命令1执行，但执行错误($? ≠ 0)，那么命令2执行


n 例2：如果目录test存在，则在目录test下面新建一个文件abc，



n 例3：查看目录TEST目录下面是否存在目录abc，如果不存在则创建，存在不做任何事情



例4：假设我们不知道目录/apps/test目录下面是否存在yy这个目录，但是我们还想要在这个目录下面新建一个文件hello






LINUX执行命令，是从左到右一个一个执行,从上到下执行
第5章：文件系统的结构组成5.1 Linux系统的结构
Linux文件系统基本结构：
inodetable: 存储文件的元数据
       inode包含文件的元信息，具体来说有以下内容：
       *文件的字节数
　　* 文件拥有者的User ID
　　* 文件的Group ID
　　* 文件的读、写、执行权限
　　* 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。
　　* 链接数，即有多少文件名指向这个inode
       *文件数据block的位置


1.2.1 查看一个文件的inode信息

在同一个挂载分区里面，任何一个文件的inode都是唯一的
在不同的挂载分区里面。比如说在A分区文件file-1的inode=123321  在B分区文件file-2的inode=123321
stat 文件的名称



q  SIZE=文件的大小(字节数)
q  Blocks=文件的大小 (占用块数量)
q  UID=文件拥有者的UID
q  GID=文件的GID
q  Access=文件的权限(读写执行)
q  Access=atime:访问的时间
q  Ctime=ctime:发生变动的时间
q  Mtime=Modify:文件修改的时间
查看每个硬盘分区的inode总数和已经使用的数量，可以使用df -i命令



使用ls -i命令，可以看到文件名对应的inode号码



查看ctime,atime,mtime
ls -lcfilename         列出文件的 ctime
ls -lu filename         列出文件的 atime
ls -l filename          列出文件的mtime



如果INDOE号耗尽，一是删除文件，二是扩展INDOE号


第6章 实战-怎样创建硬链接和软链接

Linux链接概念
Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。




【硬连接】
硬连接指通过索引节点号来进行连接。inode是可以对应多个文件名的
在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。
在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。
硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。

其原因:因为对应该目录的索引节点有一个以上的连接。
只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。
【软连接】另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息


6.1 实战1--ln命令创建硬链接

语法格式：ln 源文件 目标文件



硬链接的原理就是多个文件名指向同一个inode，因此多个文件名共用一个inode号，达到共享与备份的目的
注意：源文件被删除，不影响链接文件的正常使用



硬链接不能针对目录创建



硬链接不能跨分区进行创建




硬链接的特点: 无法针对目录,跨分区无法实现。因为每个分区都有自己独立的INDOE编号


6.2 实战-2 ln -s 创建软连接

软链接：相当于windows中的快捷方式
语法：ln –s 源文件 目录文件
注：源文件被删除，链接文件失效




测试：删除源文件看一下目录文件还能不能看？




能针对目录创建



能跨分区创建（源文件必须写绝对路径）

5.1.png (24.95 KB, 下载次数: 0)
