
依赖包安装

# yum install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre* pcre-devel  -y
# yum groupinstall "Development Tools" "Development Libraries" -y

Pcre下载地址：https://ftp.pcre.org/pub/pcre/
Nginx下载地址：http://nginx.org/download/

# tar xf pcre-8.37.tar.bz2 -C /usr/local/src/  # 解压此安装包即可，不需要安装



1.解压安装包
# tar -zxvf nginx-x.xx.x.tar.gz -C /usr/local/

2.安装相关依赖软件
# yum -y install pcre-devel zlib-devel

3.执行configure   （指定安装路径）
# cd /usr/local/nginx-x.xx.x/
# ./configure --prefix=/usr/local/nginx

4.执行make编译 make install 安装


./configure --prefix=/usr/local/nginx --with-http_dav_module --with-http_stub_status_module --with-http_addition_module --with-http_sub_module --with-http_flv_module --with-http_mp4_module
*****************************************************************************************************************
--with-http_dav_module                  #启用支持（增加PUT,DELETE,MKCOL：创建集合，COPY和MOVE方法） 默认关闭，需要编译开启
--with-http_stub_status_module     #启用支持（获取Nginx上次启动以来的工作状态）
--with-http_addition_module          #启用支持（作为一个输出过滤器，支持不完全缓冲，分部分相应请求）
--with-http_sub_module                  #启用支持（允许一些其他文本替换Nginx相应中的一些文本）
--with-http_flv_module                    #启用支持（提供支持flv视频文件支持）
--with-http_mp4_module                      #启用支持（提供支持mp4视频文件支持，提供伪流媒体服务端支持）
--with-pcre=/usr/local/src/pcre-8.37   #需要注意，这里指的是源码,用#./configure --help |grep pcre查看帮助


6.配置文件分布


# ll /usr/local/nginx/
drwxr-xr-x 2 root root 4096 Sep 1513:44 conf           #Nginx相关配置文件
drwxr-xr-x 2 root root 4096 Sep 1513:44 html           #网站根目录
drwxr-xr-x 2 root root 4096 Sep 1513:44 logs           #日志文件
drwxr-xr-x 2 root root 4096 Sep 1513:44 sbin           #Nginx启动脚本


  nginx path prefix: "/usr/local/nginx"                                             安装路径
  nginx binary file: "/usr/local/nginx/sbin/nginx"                              执行文件路径
  nginx configuration prefix: "/usr/local/nginx/conf"                         配置文件路径
  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"            配置文件的具体名称
  nginx pid file: "/usr/local/nginx/logs/nginx.pid"                              Pid文件路径
  nginx error log file: "/usr/local/nginx/logs/error.log"                        错误日志文件路径
  nginx http access log file: "/usr/local/nginx/logs/access.log"               访问日志文件路径
  nginx http client request body temporary files: "client_body_temp"
  nginx http proxy temporary files: "proxy_temp"
  nginx http fastcgi temporary files: "fastcgi_temp"
  nginx http uwsgi temporary files: "uwsgi_temp"
  nginx http scgi temporary files: "scgi_temp"



7.启动
在启动nginx之前要确认http 是否已关闭（如果http已启动，会占用端口，造成nginx启动失败）


# /usr/local/nginx/sbin/nginx

创建用户 作nginx启动身份(不允许此用户登录本地系统）（或在VIM的未行模式：！useradd -r www -s /sbin/nologin）-r 创建系统用户

# useradd -r www -s /sbin/nologin

nginx主配置文件

# /usr/local/nginx/conf/nginx.conf


nginx主配置文件






# /usr/local/nginx/conf/nginx.conf
user  nobody;               #定义启动nginx 用户身份（建议不使用默认用户） 默认注释
worker_processes  1;        #定义一个父进程开启多少个子进程（建议根据机器上的CPU核心数减一）

#error_log  logs/error.log;         #（错误日志，默认注释，默认存放路径为此路径，有如果有需求更改，去掉注释和更改路）
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;         #（PID文件，默认注释，默认存放路径为此路径，有如果有需求更改，去掉注释和更改路）

events {                            # nginx的工作模式（混合模式）
    worker_connections  1024;       # 定义一个子进程最多可以开的线程数量（子进程X线程=最多并发数量（不考虑内存情况）（官方：如果内存16G最大支持5万并发）
}

http {
    include       mime.types;       # 定义网页支持的文件类型（此项是指定了/usr/local/nginx/conf/mime.types 文件，支持类型在此文件已定义)
    default_type  application/octet-stream;     # 默认支持的类型（可以修改）

  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    # 定义默认日志格式 （远程主机IP-那个用户-本地的时间-请求头信息）
    #                  '$status $body_bytes_sent "$http_referer" '                                                            （状态-发送的字节数-
    #                  '"$http_user_agent" "$http_x_forwarded_for"';                                                       （用户的浏览器版本-

    #access_log  logs/access.log  main;                                        # 用户访问日志的默认存放路径

sendfile        on;                     # 是否允许Nginx 以0考贝的方式输出文件（对于普通的web应用设置为on，能提高用户访问率，减少用户访问的等待时间。对于作为下载的应用设置为off，能平衡网络和系统硬件、IO找一个平衡点，让用户下载不会太慢，同时也让系统不会重负荷）

keepalive_timeout  65;                 # 长连接（不能低于网页打开的时间）

#gzip  on;                                     # 定义压缩（默认为开启）

server {                                            # 设置web页面，一个server代表一个页面
        listen       80;                            # 监听端口
        server_name  localhost;            #  定义服务名称（默认是localhost）

#charset koi8-r;                  # 定义字符编码（不需修改，默认会自动匹配浏览器的字符编码）

#access_log  logs/host.access.log  main;                        # 针对服务的访问日志

 location / {                              # 定义根路径（此项定义的根路径为/usr/local/nginx /   即为安装的路径为此项定义的根路径）
            root   html;                   # 定义根路径下的存放网页的目录
            index  index.html index.htm;   # 定义网页文件，前者优先于后者（先会找index.html 如果没有 没会找index.htm，如果找到前者，则停止查找，如果两者都找不到，则返回错误提示）
        }

#error_page  404              /404.html;   # 定义错误页面（路径为/usr/local/nginx /html/的404.html 文件，默认没存在，有必要可手动添加）

 error_page   500 502 503 504  /50x.html;  # 定义错误页面的500以上的返回信息 （路径为/usr/local/nginx /html/50X.html 文件）
        location = /50x.html {
            root   html;
        }

# sed -i '/#/d' nginx.conf                 # 去掉配置文件中的所有注释项
# sed -i '/^$/d' nginx.conf                # 去掉配置文件中的所有空行

# 添加居于不同端口的虚拟主机/添加居于不同名字的虚拟主机（把server_name  localhost;  的 localhost   改掉   改为相对 的域名，端口为80）
server {
        listen       80;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }
    }
server {
        listen       8080;
        server_name  localhost;
        location / {
            root   cjk;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}

# mkdir /usr/local/nginx/cjk
# echo lzll > cjk/index.html

# 添加居于不同IP的虚拟主机
server {
        listen      192.168.18.2:80;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }
error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
   }
server {
        listen       192.168.18.3:80;
        server_name  localhost;
        location / {
            root   cjk;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}


php支持：

location ~ \.php$ {
    root           html;
    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;   #将scripts修改为nginx的html，即Nginx页面目录，因为要处理的php文件也在这个目录下
    include        fastcgi_params;
}


启动nginx:   /usr/local/nginx/sbin/nginx
重载nginx:   /usr/local/nginx/sbin/nginx -s reload
开机启动：    echo "/usr/local/nginx/sbin/nginx &" >> /etc/rc.local
