LNMP源码编译
       LNMP=Linux Nginx Mysql PHP
Nginx ("engine x") 是一个高性能的 HTTP 和 反向代理 服务器。Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。
       Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度BWS、新浪、网易、腾讯等
Nginx官方网站

源码包下载：  http://nginx.org/download/
       RamBler：http://www.rambler.ru/        `        Nginx：http://nginx.org/
C:\Users\andyli\AppData\Local\YNote\data\m18789215299@163.com\8adc0e487b924301a1784a37f80ccfee\ip_image002.jpeg
       Rambler是俄罗斯的门户网站，也是俄罗斯的三大门户之一，在这里你可以了解俄罗斯社会的方方面面。严格意义来讲，Rambler应该是俄罗斯的行业分类网站，每天大约有800万人利用该网站查询相关信息，是俄罗斯当之无愧的第二大本土搜索引擎。
了解Tengine
       Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。（可以这样理解：淘宝拿到了Nginx源代码之后，进行了功能的填充，优化等等，然后提交给Nginx官方，但是由于Nginx官方相应慢或者不响应，加上语言沟通的不顺畅，于是淘宝公司就自己打包，在遵循GPL的原则上进行二次开发，于是就出了现在的Tengine这个版本）。
       官网网站：http://tengine.taobao.org/
Nginx的工作原理
Nginx 本身只支持静态页面的处理，当客户端访问php页面的时候，nginx会将php转到php-fpm也处理，
php-fpm服务会把php页面解析成html文件给nginx处理，nginx返回给客户端处理
这里需要结合Apache的工作，对PHP文件处理过程的区别
       1：Nginx是通过php-fpm这个服务来处理php文件
       2：Apache是通过libphp5.so这个模块来处理php文件
Apache：
C:\Users\andyli\AppData\Local\YNote\data\m18789215299@163.com\1fa7ec6687244eea921790fca117a470\ip_image004.jpeg
Nginx：
                                           C:\Users\andyli\AppData\Local\YNote\data\m18789215299@163.com\854aca1b65a546eb99e1fe904ae79457\ip_image006.jpeg
       Apache的libphp5.so随着apache服务器一起运行，而Nginx和php-fpm是各自独立运行，所以在服务的运行过程中，Nginx和php-fpm都需要分别启动！
修改Nginx配置文件，启动nginx服务，修改php配置文件，启动php-fpm服务
LNMP软件所需要的软件包
MySQL=http://dev.mysql.com/downloads/mysql/                      mysql主程序包
PHP=http://php.net/downloads.php                                              php主程序包
Nginx=http://nginx.org/en/download.html                                         Nginx主程序包
libmcrypt=http://mcrypt.hellug.gr/index.html                             libmcrypt加密算法扩展库，支持3DES等加密
         或者：http://mcrypt.sourceforge.net/                           MCrypt/Libmcrypt development site (secure access)
pcre=http://pcre.org/                                                                        pcre是php的依赖包

软件版本：
 libmcrypt-2.5.8
mysql-5.6.26
nginx-1.8.0
pcre-8.37
php-5.6.13
在Nginx官网网站上
C:\Users\andyli\AppData\Local\YNote\data\m18789215299@163.com\8864401cf33a4a4e85330fc794e67ccf\ip_image008.jpeg
       Mainline version   主线版本
       Stable version         稳定版本
       Legacy versions      老版本，历史版本
旧版本下载：http://mirrors.sohu.com/nginx/
编译安装Nginx
       如果我们在安装了开发工具之后，那么像gcc，gcc-c++，autoconf，automake 这些工具都会默认安装，如果没有安装开发工具（如最小安装的系统），那么这些东西我们必须手动安装
解决依赖
    建议在编译之前，把开发包组安装：
"Development Tools"和 "Development Libraries"
yum groupinstall "Development Tools" "Development Libraries" -y
[root@XueGod63 ~]# yum install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre* pcre-devel  -y
 Zlib：Nginx提供gzip模块，需要zlib的支持
Openssl：Nginx提供SSL的功能
root@XueGod63 ~]# tar xf pcre-8.37.tar.bz2 -C /usr/local/src/          //解压此安装包即可，不需要安装，Nginx需要指定pcre的源码不是安装后的路径，此包的功能是支持地址重写rewrite功能  pcre的依赖可以yum安装pcre和pcre-devel解决！

解压编译安装
       [root@XueGod63 ~]# tar xvf nginx-1.8.0.tar.gz -C /usr/local/src/ ; cd /usr/local/src/nginx-1.8.0
[root@XueGod63
nginx-1.8.0]# ./configure --prefix=/usr/local/nginx --with-http_dav_module --with-http_stub_status_module --with-http_addition_module --with-http_sub_module --with-http_flv_module --with-http_mp4_module --with-pcre=/usr/local/src/pcre-8.37  --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module
*****************************************************************************************************************
--with-http_dav_module                  #启用支持（增加PUT,DELETE,MKCOL：创建集合，COPY和MOVE方法）
                                    默认关闭，需要编译开启
--with-http_stub_status_module    #启用支持（获取Nginx上次启动以来的工作状态）
--with-http_addition_module         #启用支持（作为一个输出过滤器，支持不完全缓冲，分部分相应请求）
--with-http_sub_module                 #启用支持（允许一些其他文本替换Nginx相应中的一些文本）
--with-http_flv_module                   #启用支持（提供支持flv视频文件支持）
--with-http_mp4_module                      #启用支持（提供支持mp4视频文件支持，提供伪流媒体服务端支持）
--with-pcre=/usr/local/src/pcre-8.37   #需要注意，这里指的是源码,用#./configure --help |grep pcre查看帮助
 --with-http_ssl_module                    #支持ssl
[root@XueGod63 nginx-1.8.0]# make –j 3 ; make install ; cd
 [root@XueGod63 ~]# useradd -M -u 8001 -s /sbin/nologin nginx               //用于运行Nginx的用户
Nginx目录结构
       [root@XueGod63 ~]# ll /usr/local/nginx/l l
drwxr-xr-x 2 root root 4096 Sep 1513:44 conf           #Nginx相关配置文件
drwxr-xr-x 2 root root 4096 Sep 1513:44 html           #网站根目录
drwxr-xr-x 2 root root 4096 Sep 1513:44 logs           #日志文件
drwxr-xr-x 2 root root 4096 Sep 1513:44 sbin           #Nginx启动脚本
配置Nginx支持php文件
       [root@XueGod63 ~]# vim /usr/local/nginx/conf/nginx.conf                   //Nginx主配置文件
#user  nobody;
user nginx nginx;                   #添加此行
……
并在所支持的主页面格式中添加php格式的主页，类似如下：
location / {
            root   html;
            index  index.php index.html index.htm;
        }

        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}                      #找到上面这段内容，将这段内容复制，去掉#且修改为如下
location ~ \.php$ {
    root           html;
    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  $document_root$ $fastcgi_script_name;      #将scripts修改为nginx的html，即Nginx页面目录，因为要处理的php文件也在这个目录下
    include        fastcgi_params;
}
启动Nginx、
[root@XueGod63 ~]# /usr/local/nginx/sbin/nginx
[root@XueGod63 ~]# netstat -tlnp | grep nginx
tcp        0      00.0.0.0:80                  0.0.0.0:*                   LISTEN      7083/nginx

使用浏览器测试   http://192.168.1.63
C:\Users\andyli\AppData\Local\YNote\data\m18789215299@163.com\b295bd047a5642859227d1629d45850e\lip_image009.png
Nginx维护命令
       [root@XueGod63 ~]# /usr/local/nginx/sbin/nginx -t                  //检查配置文件语法是否有错误
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
       [root@XueGod63 ~]# /usr/local/nginx/sbin/nginx -s reload            //重新加载配置文而建（平滑重启）
       [root@XueGod63 ~]#
/usr/local/nginx/sbin/nginx -s stop        //停止Nginx，注意：启动没有任何参数
       [root@XueGod63 ~]# echo "/usr/local/nginx/sbin/nginx &" >> /etc/rc.local          //开机启动
平滑重启（保持了C-S链接，不断开，服务器只是重新加载了配置文件，没有开启和关闭的服务器的一个动作）
编译安装Mysql
安装之前使用 yum remove mysql  确保没有安装MySQL
解决依赖

[root@XueGod63 ~]# yum install -y cmake     ncurses-devel              //gcc等相关在编译apache已安装
编译安装MySql
         [root@XueGod63 ~]# tar xf mysql-5.6.26.tar.gz -C /usr/local/src/ ; cd /usr/local/src/mysql-5.6.26
         [root@XueGod63 mysql-5.6.26]# useradd -M -s /sbin/nologin mysql                            //创建mysql运行用户
[root@XueGod63 mysql-5.6.26]# cmake \
 -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
 -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \
 -DDEFAULT_CHARSET=utf8 \
 -DDEFAULT_COLLATION=utf8_general_ci \
 -DWITH_EXTRA_CHARSETS=all \
 -DWITH_MYISAM_STORAGE_ENGINE=1\
 -DWITH_INNOBASE_STORAGE_ENGINE=1\
 -DWITH_MEMORY_STORAGE_ENGINE=1\
 -DWITH_READLINE=1\
 -DENABLED_LOCAL_INFILE=1\
 -DMYSQL_DATADIR=/usr/local/mysql/data \
 -DMYSQL-USER=mysql
*****************************************************************************************************************
DCMAKE_INSTALL_PREFIX                                      #制定mysql的安装根目录，目录在安装的时候会自动创建，这个值也可以在服务器启动时，用--basedir来设置
DMYSQL_UNIX_ADDR                                           #服务器与本地客户端进行通信的Unix套接字文件，必须是绝对路径，默认位置/tmp/mysql.sock，可以在服务器启动时，用--socket改变
DDEFAULT_CHARSET                        #mysql默认使用的字符集，不指定将默认使用Latin1西欧字符集
DDEFAULT_COLLATION                           #默认字符校对
DWITH_EXTRA_CHARSETS                  #制定mysql拓展字符集，默认值也是all支持所有的字符集
DWITH_MYISAM_STORAGE_ENGINE #静态编译MYISAM，INNOBASE，MEMORY存储引擎到MYSQL服务
                                   器，这样MYSQL就支持这三种存储引擎
DWITH_INNOBASE_STORAGE_ENGINE
DWITH_MEMORY_STORAGE_ENGINE
DWITH_READLINE                    #支持readline库
DENABLED_LOCAL_INFILE                    #允许本地倒入数据，启用加载本地数据
DMYSQL_DATADIR                                #mysql数据库存放路径
DMYSQL-USER                                    #运行mysql的用户

没有这个文件  创建即可

这些编译参数的帮助寻找方法：
http://www.mysql.com→→Documentation→→选择对应的版本（5.6）→→HTML Online→→View→→Installation & Upgrades→→Installing MySQL from Source →→MySQL Source-Configuration Options→→
http://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html                 //最终的URL
 [root@XueGod63 mysql-5.6.26]# ccmake /usr/local/src/mysql-5.6.26/       //除开在线，可以使用本地帮助

 [root@XueGod63 mysql-5.6.26]# make -j 2 ; make install          //以2个进程来编译，不要超过CPU核心数
上面的make过程比较漫长，我们使用了-j 2来增加编译速度
配置mysql
         [root@XueGod63 mysql-5.6.26]# cd && chown -R mysql:mysql /usr/local/mysql/                //属主属组更改

         [root@XueGod63 ~]# cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf       //覆盖原配置文件
         [root@XueGod63 ~]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld    //启动脚本
         [root@XueGod63 ~]# vim /etc/init.d/ mysqld                                                   //更改启动脚本中指定mysql位置
basedir=
datadir=
#修改为
basedir=/usr/local/mysql
datadir=/usr/local/mysql/data
         [root@XueGod63 ~]# chkconfig mysqld  on                                         //开机启动
初始化数据库
/usr/local/mysql/scripts/mysql_install_db --defaults-file=/etc/my.cnf  --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --user=mysql
 [root@XueGod63 ~]# /usr/local/mysql/scripts/mysql_install_db \
--defaults-file=/etc/my.cnf  \
--basedir=/usr/local/mysql/\
--datadir=/usr/local/mysql/data/\
--user=mysql
#类似于在rpm安装的时候启动数据库弹出的初始化消息
[root@XueGod63 ~]# ls /usr/local/mysql/data/                     //初始化看这个下面有无mysql和test等数据库
ibdata1  ib_logfile0  ib_logfile1  mysql  performance_schema  test

配置环境变量，让系统调用MySQL命令：
vim /etc/profile.d/mysql.sh
添加一行保存：
export PATH=/usr/local/mysql/bin:$PATH
用source 立即生效：
source /etc/profile.d/mysql.sh



启动数据库
 [root@XueGod63 ~]# servie mysqld  start
 初始安全设置（设置用户名密码、删除匿名用户、测试数据库等）
[root@XueGod63 ~]# mysql_secure_installation

修改安装目录和数据目录的权限
chown -R root.mysql /usr/local/mysql
chown -R mysql.mysql /usr/local/mysql/data

 注意：如果启动数据库的时候保存找不到PID文件：
[root@xuegod63 ~]# /etc/init.d/mysqld start
Starting MySQL... ERROR! The server quit without updating PID file (/usr/local/mysql/data/xuegod63.pid).
重新初始化即可
解决方法：
1、查看错误日志文件，在/usr/local/mysql/data 目录下会生成一个err 日志文件，看日志文件的报错信息。根据信息来处理
如果提示缺少表，则需要重新初始化数据库，
重新初始化的步奏：先删除/usr/local/mysql/data 目录下 rm -rf ibdata1 ib_*
三个文件，然后执行数据库初始化命令
2.注意权限问题，根据上面的，配置好 /usr/local/mysql 和/usr/local/mysql/data 的权限
ll





编译安装PHP
       在Nginx中，我们使用的是php-fpm来对php页面解析，PHP-FPM其实是PHP源代码的一个补丁，指在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，再编译安装PHP后才可以使用
       从PHP5.3.3开始，PHP中直接整合了PHP-FPM，所以从PHP5.3.3版本以后，不需要下载PHP-FPM补丁包了，下面是PHP-FPM官方发出来的通知：
       http://php-fpm.org/download
C:\Users\andyli\AppData\Local\YNote\data\m18789215299@163.com\af3c7afb2a9144ca9ad0762b009e38be\lip_image010.png
解决依赖
       [root@XueGod63 ~]# yum install php-pear -y
   //pear按照一定的分类来管理pear应用代码库，你
的pear代码可以组织到其中适当的目录中，其他人可以方便的检索并分享到你的成果；pear不仅仅是一个代码仓库，它同时也是一个标准，使用这个标准来书写你的php代码，将会增强你的程序的可读性，复用性，减少出错的几率；Pear通过两个类为你搭建了一个框架，实现了诸如析构函数，错误捕获功能，你通过继承就可以使用这些功能
PHP添加libmcrypt拓展
       libmcrypt加密算法扩展库，支持DES, 3DES, RIJNDAEL, Twofish, IDEA, GOST, CAST-256, ARCFOUR, SERPENT, SAFER+等算法
       官方网站：http://mcrypt.hellug.gr/index.html  或者 http://mcrypt.sourceforge.net/
       在页面上点击下图连接，可以下载最新的2.5.8版本（页面上有个Browse All Files→→Libmcrypt）
yum install zlib libxml libjpeg freetype libpng gd curl libiconv zlib-devel libxml2-devel libjpeg-devel freetype-devel libpng-devel gd-devel curl-devel openssl openssl-devel libxslt-devel


1、安装加密算法扩展库
[root@XueGod63 ~]# tar xf libmcrypt-2.5.8.tar.bz2 -C /usr/local/src/ ; cd /usr/local/src/libmcrypt-2.5.8/
       [root@XueGod63 libmcrypt-2.5.8]# ./configure --prefix=/usr/local/libmcrypt ; make ; make install ; cd

libmcrypt-2.5.8，通常在编译php的时候需要这个库。
下载后解压并安装：
1，bzip2 -d libmcrypt-2.5.8.tar.bz2   # tar zxf libmcrypt-2.5.8.tar.gz
2，tar -xvf libmcrypt-2.5.8.tar
3，cd libmcrypt-2.5.8
4，./configure
5，make && make install


2、除开上面的依赖解决之外，还需要安装图片，xml，字体支持基本库，使用yum去安装，安装的时候，这些软件包自
身也有依赖！
[root@XueGod63  ~]# yum install -y libxml2-devel libcurl-devel libjpeg-devel libpng-devel freetype freetype-devel libzip libzip-devel

3、需要添加到库文件路径
由于系统默认规定只在/lib、/lib64、/lib/lib64下面找库文件，所以我们需要手动添加进去。
       [root@XueGod63 ~]# vim /etc/ld.so.conf
include ld.so.conf.d/*.conf                          #此行原有
/usr/local/libmcrypt/lib                       #此行添加
/usr/local/mysql/lib                           #此行添加
 [root@XueGod63 ~]# ldconfig
[root@XueGod63 ~]# echo 'ldconfig' >> /etc/rc.local





编译安装php/et
       [root@XueGod63 ~]# tar xf php-5.6.13.tar.bz2 -C /usr/local/src/ ; cd /usr/local/src/php-5.6.13
[root@XueGod63 php-5.6.13]# ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex  --enable-fpm --enable-mbstring --with-gd --enable-mysqlnd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --with-gettext --with-mcrypt=/usr/local/libmcrypt  --with-gettex
#若不加--with-gettext，安装 zabbix 会有一个 php gettext no fail 的错误
*****************************************************************************************************************
--with-config-file-path                         #设置 php.ini 的搜索路径。默认为 PREFIX/lib
--with-mysql                        #mysql安装目录，对mysql的支持
--with-mysqli                         #mysqli扩展技术不仅可以调用MySQL的存储过程、处理MySQL事务，而且还可以使访问数据库工作变得更加稳定。是一个数据库驱动
--with-iconv-dir                      #种字符集间的转换
--with-freetype-dir                  #打开对freetype字体库的支持
--with-jpeg-dir                      #打开对jpeg图片的支持
--with-png-dir                          #打开对png图片的支持
--with-zlib                        #打开zlib库的支持,实现GZIP压缩输出
--with-libxml-dir=/usr                     #打开libxml2库的支持,libxml是一个用来解析XML文档的函数库
--enable-xml                        #支持xml文档
--disable-rpath                         #关闭额外的运行库文件
--enable-bcmath                      #打开图片大小调整,用到zabbix监控的时候用到了这个模块
--enable-shmop                       #shmop共享内存操作函数，可以与c/c++通讯
--enable-sysvsem  #加上上面shmop，这样就使得你的PHP系统可以处理相关的IPC函数（活动在内核级别）。
--enable-inline-optimization       #优化线程
--with-curl                            #打开curl浏览工具的支持
--with-curlwrappers                    #运用curl工具打开url流 ，新版PHP5.6已弃用
--enable-mbregex                    #支持多字节正则表达式
--enable-fpm                       #CGI方式安装的启动程序，PHP-FPM服务
--enable-mbstring                     #多字节，字符串的支持
--with-gd                             #打开gd库的支持，是php处理图形的扩展库，GD库提供了一系列用来处理图片的API，使用GD库可以处理图片，或者生成图片。
--enable-gd-native-ttf                    #支持TrueType字符串函数库
--with-openssl                          #打开ssl支持
--with-mhash                       #支持mhash算法扩展
--enable-pcntl                          #freeTDS需要用到的，pcntl扩展可以支持php的多线程操作
--enable-sockets                       #打开 sockets 支持
--with-xmlrpc                       #打开xml-rpc的c语言
--enable-zip                         #打开对zip的支持
--enable-soap                          #扩展库通过soap协议实现了客服端与服务器端的数据交互操作
--with-mcrypt                       #mcrypt算法扩展
--with-zlib-dir=/usr/local/libzip   ##指定zip库路径

此步骤如果出错：
谷歌找的答案
Linux系统中，编译php 的时候，在configure配置的时候，出现“configure: error: Don’t know how to define struct flock on this system, set –enable-opcache=no”这样的错误。但是又需要opcache 扩展，有两种方法可以解决此问题：
1：

1
2
3
4
vim /etc/ld.so.conf.d/local.conf     # 编辑库文件
/usr/local/lib                       # 添加该行
:wq                                  # 保存退出
ldconfig -v                          # 使之生效

2：如果这种方法不行，那就是指定mysql路径错误，方法如下：

1
2
3
4
vim  /etc/ld.so.conf.d/mysql-x86_64.conf   #编辑改文件
/usr/local/mysql/lib                       #添加该行 此内容是mysql的安装目录
:wq                                        #保存退出
ldconfig -v                                #使之生效


[root@XueGod63 php-5.6.13]# make -j 3 && make install ; cd
如果安装报错，久安张扩展源即可

安装epel源，主机需要连接互联网
          # rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
如果上面在make的时候 提示libzip相关的报错，可以安装下面的方法来解决：
   先 执行 make clean
然后 安装压缩支持库
[root@xuegod63 ~]# tar xf libzip-1.1.2.tar.gz -C /usr/local/src/
[root@xuegod63 src]# cd /usr/local/src/libzip-1.1.2/
[root@xuegod63 libzip-1.1.2]# ./configure --prefix=/usr/local/libzip && make && make install
在重新编译：./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex  --enable-fpm --enable-mbstring --with-gd --enable-mysqlnd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --with-gettext --with-mcrypt=/usr/local/libmcrypt   --with-pcre-dir=/usr/local/src/pcre-8.37/ --with-zlib-dir=/usr/local/libzip





配置php和php-fpm
PHP配置文件：
       [root@XueGod63 ~]# cp /usr/local/php-5.6.38/php.ini-production /usr/local/php/php.ini
PHP-FPM配置文件：
       [root@XueGod63 ~]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
修改 /usr/local/php/etc/php-fpm.conf 运-j行用户和组改为nginx
        vim /usr/local/php/etc/php-fpm.conf
PHP-FPM启动脚本
       [root@XueGod63 ~]# cp /usr/local/src/php-5.6.13/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
       [root@XueGod63 ~]# chmod +x /etc/init.d/php-fpm
[root@XueGod63 ~]# chkconfig php-fpm on
[root@XueGod63 ~]# /etc/init.d/php-fpm start
测试LNMP的PHP支持
       [root@XueGod63 ~]# echo "<?php phpinfo(); ?>" > /usr/local/nginx/html/index.php
浏览器访问：http://192.168.1.63
C:\Users\andyli\AppData\Local\YNote\data\m18789215299@163.com\842862001db54a7984064311d207c131\ip_image013.jpeg

提醒：今晚做完实验，保存一个快照，后面讲zabbix需要用到环境